.data

        prompt:  .asciiz "Type 8 characters or less --  "
	bad_input: .asciiz "Invalid hexadecimal number"
	new_line: .asciiz "\n"
	string: .space 9 
.text
main:
        
         
         li $v0,8 	#getting the string
         la $a0, string 
         li $a1, 9   
         syscall
	
         
      	lb $t0, 0($a0)
	beq $t0, 10, error #for empty string
	
	
	 la $a0,new_line #print line space
         li $v0,4
         syscall	 	

	li $s0, 0	#this is for reading a character
	la $s1, string	#this is for the string address
	li $s4, 0	#this is the counter
count_loop:
	lb $s0, 0($s1)  #loads the character
	addi $s1, $s1, 1 	#adds 1 byte

	beq $s0, 32, count_loop #if space dont add to count
	addi $s4, $s4, 1 	#adds to count

	beq $s0, 10, exit_count #exit if null
	beq $s0, 0, exit_count	#xit if press enter
	j count_loop	#loop


exit_count:

	
	li $s0, 0	#character
	la $s1, string 	#string address
	li $s2, 0 	#for looping
	li $s3, 9 
	addi $t0, $zero, 4
	sub $s4, $s4, 2	#need to subtract length minus 2
	mult $s4, $t0	
	mflo $s5	#this is shift amount
	li $s6, 0	#this is the sum

	
	
loop:
	
	lb $s0, 0($s1)  	#loads the character
	addi $s1, $s1, 1   #adds 1 byte to string address
	beq $s0, 32, loop   #if space then reloop

	beq $s0, 10, exit_loop	#exits if press enter
	beq $s0, 0, exit_loop	#exits if null
	
check_for_0_9:
	
	blt $s0, 48, error	#checks if is in range of 0 -9
	bgt $s0, 57, check_for_A_F
	

        
	add $t0, $s0, $zero #converts it to decimal
	addi $t0, $t0, -48
	
	
	sllv $t0, $t0, $s5 #shifts
	add $s6, $s6, $t0 #adds to sum
	
		

	j correct_input

		

check_for_A_F:

	
       	blt $s0, 65, error	#checks if in range of A - F
	bgt $s0, 70, check_for_a_f
	



         
                  	 
	 add $t0, $s0, $zero #converts it  to decimal
	 addi $t0, $t0, -55
	 
	
	sllv $t0, $t0, $s5 #shifts
	add $s6, $s6, $t0 #adds to sum
	

	j correct_input 
	
     

check_for_a_f:

       	blt $s0, 97, error #check if in range of a -f
	bgt $s0, 102, error
	

                           	 
	 add $t0, $s0, $zero #converts it to decimal
	 addi $t0, $t0, -87
 
	
	
	sllv $t0, $t0, $s5 #shifts
	add $s6, $s6, $t0 #adds to sum
	
	
	 j correct_input   




correct_input:
      

        
	
	addi $s2, $s2, 1  #adds to loop counter
	sub $s5, $s5, 4 #subtracts shift amount

	
	bne $s2, $s3, loop	#exits if loop over
	j exit_loop
	
			
error:
   	 la $a0, bad_input #prints bad input
         li $v0, 4
         syscall
 
 
        li $v0,10 #end program
        syscall
       
       
 exit_loop:
 	
	

	bgt $s4, 6, negatives #if MSB is 1 go to tag to divide
  

	add $a0, $s6, $zero #prints sum
  	li $v0, 1
  	syscall
  
  	
  	
        li $v0,10 #end program
        syscall
    
negatives: 

	li $t0, 10000	#prints unsigned version
	divu $s6, $t0
	mflo $t1
	mfhi $t2

	add $a0, $t1, $zero
	li $v0, 1
	syscall
	

	add $a0, $t2, $zero
	li $v0, 1
	syscall         
	
  
 
        li $v0,10 #end program
        syscall